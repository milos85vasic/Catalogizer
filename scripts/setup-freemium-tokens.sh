#!/bin/bash

# Freemium Token Setup Script for Catalogizer Security Testing
# This script helps users set up their freemium accounts and tokens

set -e

echo "üîê Catalogizer Freemium Security Testing Setup"
echo "=============================================="
echo ""

# Function to setup SonarQube token
setup_sonarqube() {
    echo "üîç SonarQube Community Edition (Free)"
    echo "-------------------------------------"
    echo "SonarQube provides code quality analysis with:"
    echo "‚Ä¢ Unlimited private projects"
    echo "‚Ä¢ All major language support"
    echo "‚Ä¢ Quality gates and rules"
    echo ""
    echo "üìã Setup Steps:"
    echo "1. Go to: https://sonarcloud.io"
    echo "2. Sign up for free account"
    echo "3. Create a new organization or use personal account"
    echo "4. Go to Account ‚Üí Security ‚Üí Generate Token"
    echo "5. Copy the token and set it:"
    echo ""
    echo "   export SONAR_TOKEN=your_token_here"
    echo ""
    read -p "Do you have a SONAR_TOKEN? (y/n): " has_sonar
    if [[ $has_sonar =~ ^[Yy]$ ]]; then
        read -p "Enter your SONAR_TOKEN: " sonar_token
        export SONAR_TOKEN="$sonar_token"
        echo "‚úÖ SONAR_TOKEN set successfully"
    else
        echo "‚ö†Ô∏è  Skipping SonarQube setup"
    fi
    echo ""
}

# Function to setup Snyk token
setup_snyk() {
    echo "üîí Snyk Security Scanning (Free)"
    echo "---------------------------------"
    echo "Snyk provides vulnerability scanning with:"
    echo "‚Ä¢ Unlimited private repositories"
    echo "‚Ä¢ Unlimited developers"
    echo "‚Ä¢ 200 tests/month for public repos"
    echo "‚Ä¢ Basic remediation guidance"
    echo ""
    echo "üìã Setup Steps:"
    echo "1. Go to: https://snyk.io"
    echo "2. Sign up for free account"
    echo "3. Verify your email"
    echo "4. Go to Account ‚Üí General ‚Üí API Token"
    echo "5. Copy the token and set it:"
    echo ""
    echo "   export SNYK_TOKEN=your_token_here"
    echo ""
    read -p "Do you have a SNYK_TOKEN? (y/n): " has_snyk
    if [[ $has_snyk =~ ^[Yy]$ ]]; then
        read -p "Enter your SNYK_TOKEN: " snyk_token
        export SNYK_TOKEN="$snyk_token"
        echo "‚úÖ SNYK_TOKEN set successfully"
    else
        echo "‚ö†Ô∏è  Skipping Snyk setup"
    fi
    echo ""
}

# Function to test Docker setup
test_docker() {
    echo "üê≥ Testing Docker Setup"
    echo "-----------------------"
    if command -v docker &> /dev/null; then
        echo "‚úÖ Docker is installed"
        if command -v docker-compose &> /dev/null; then
            echo "‚úÖ Docker Compose is installed"
            echo "üöÄ Docker setup is ready for security testing"
        else
            echo "‚ùå Docker Compose is not installed"
            echo "üì¶ Install Docker Compose to run full security tests"
        fi
    else
        echo "‚ùå Docker is not installed"
        echo "üì¶ Install Docker to run full security tests"
        echo "üí° You can still run basic tests without Docker"
    fi
    echo ""
}

# Function to create .env file
create_env_file() {
    echo "üìù Creating Environment Configuration"
    echo "------------------------------------"
    ENV_FILE=".env.security"
    cat > "$ENV_FILE" << EOF
# Catalogizer Security Testing Environment Variables
# Copy this to your .env file or export these variables

# SonarQube (Free Community Edition)
# SONAR_TOKEN=$SONAR_TOKEN
# SONAR_HOST_URL=http://localhost:9000

# Snyk (Free Tier)
# SNYK_TOKEN=$SNYK_TOKEN
# SNYK_ORG=catalogizer
# SNYK_SEVERITY_THRESHOLD=medium

# Docker Settings (if using Docker)
# COMPOSE_PROJECT_NAME=catalogizer-security
EOF

    echo "‚úÖ Created $ENV_FILE with your configuration"
    echo "üí° Copy the relevant variables to your .env file"
    echo ""
}

# Function to run test scan
run_test_scan() {
    echo "üß™ Running Test Security Scan"
    echo "------------------------------"
    if [ -n "$SNYK_TOKEN" ]; then
        echo "üîç Testing Snyk connection..."
        if command -v snyk &> /dev/null; then
            if snyk test --help &> /dev/null; then
                echo "‚úÖ Snyk CLI is working"
            else
                echo "‚ö†Ô∏è  Snyk CLI needs authentication"
                snyk auth "$SNYK_TOKEN" 2>/dev/null && echo "‚úÖ Snyk authenticated"
            fi
        else
            echo "üì¶ Installing Snyk CLI..."
            npm install -g snyk 2>/dev/null && echo "‚úÖ Snyk CLI installed"
        fi
    else
        echo "‚ö†Ô∏è  Skipping Snyk test (no token)"
    fi

    if [ -n "$SONAR_TOKEN" ]; then
        echo "üîç Testing SonarQube connection..."
        if curl -f -s "https://sonarcloud.io/api/system/status" &> /dev/null; then
            echo "‚úÖ SonarCloud is accessible"
        else
            echo "‚ö†Ô∏è  SonarCloud connection failed"
        fi
    else
        echo "‚ö†Ô∏è  Skipping SonarQube test (no token)"
    fi
    echo ""
}

# Main execution
main() {
    echo "Welcome to Catalogizer Freemium Security Testing Setup!"
    echo ""
    echo "This setup uses FREE versions of industry-standard security tools:"
    echo "‚Ä¢ SonarQube Community Edition (Code Quality)"
    echo "‚Ä¢ Snyk Free Tier (Vulnerability Scanning)"
    echo "‚Ä¢ OWASP Dependency Check (Open Source)"
    echo "‚Ä¢ Trivy (Open Source Vulnerability Scanner)"
    echo ""

    setup_sonarqube
    setup_snyk
    test_docker
    create_env_file
    run_test_scan

    echo "üéâ Setup Complete!"
    echo "=================="
    echo ""
    echo "Next steps:"
    echo "1. Set your environment variables:"
    echo "   source .env.security"
    echo ""
    echo "2. Run security tests:"
    echo "   ./scripts/security-test.sh"
    echo ""
    echo "3. Or run individual scans:"
    echo "   ./scripts/sonarqube-scan.sh"
    echo "   ./scripts/snyk-scan.sh"
    echo ""
    echo "üìñ For more information, see docs/TESTING_GUIDE.md"
    echo ""
    echo "üîí Happy secure coding!"
}

# Run main function
main "$@"