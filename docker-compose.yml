version: '3.8'

# Production Docker Compose configuration
# For local development, use: docker-compose -f docker-compose.dev.yml up

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: catalogizer-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-catalogizer}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Database password required}
      POSTGRES_DB: ${POSTGRES_DB:-catalogizer}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./catalog-api/database/migrations:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-catalogizer}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - catalogizer-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: catalogizer-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - catalogizer-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Catalogizer API
  api:
    build:
      context: ./catalog-api
      dockerfile: Dockerfile
      args:
        GO_VERSION: ${GO_VERSION:-1.21}
    container_name: catalogizer-api
    environment:
      # Database configuration
      DATABASE_TYPE: ${DATABASE_TYPE:-postgres}
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: ${POSTGRES_USER:-catalogizer}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_NAME: ${POSTGRES_DB:-catalogizer}

      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}

      # Application configuration
      APP_ENV: ${APP_ENV:-production}
      API_PORT: ${API_PORT:-8080}
      LOG_LEVEL: ${LOG_LEVEL:-info}

      # Security
      JWT_SECRET: ${JWT_SECRET:?JWT secret required}
      CORS_ENABLED: ${CORS_ENABLED:-false}
      CORS_ORIGINS: ${CORS_ORIGINS:-}

      # SMB/File System
      SMB_ENABLED: ${SMB_ENABLED:-true}

      # Media configuration
      MEDIA_ROOT_PATH: ${MEDIA_ROOT_PATH:-/media}
    ports:
      - "${API_PORT:-8080}:8080"
    volumes:
      - ${MEDIA_ROOT_PATH:-./media}:/media:ro
      - api_logs:/var/log/catalogizer
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - catalogizer-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 512M

  # Nginx Reverse Proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: catalogizer-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - catalogizer-network
    profiles:
      - production
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  catalogizer-network:
    driver: bridge
