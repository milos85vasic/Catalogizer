// Generated by Dagger (https://dagger.dev).
package com.catalogizer.android.data.repository;

import android.content.Context;
import com.catalogizer.android.data.local.CatalogizerDatabase;
import com.catalogizer.android.data.sync.SyncManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class OfflineRepository_Factory implements Factory<OfflineRepository> {
  private final Provider<CatalogizerDatabase> databaseProvider;

  private final Provider<SyncManager> syncManagerProvider;

  private final Provider<Context> contextProvider;

  public OfflineRepository_Factory(Provider<CatalogizerDatabase> databaseProvider,
      Provider<SyncManager> syncManagerProvider, Provider<Context> contextProvider) {
    this.databaseProvider = databaseProvider;
    this.syncManagerProvider = syncManagerProvider;
    this.contextProvider = contextProvider;
  }

  @Override
  public OfflineRepository get() {
    return newInstance(databaseProvider.get(), syncManagerProvider.get(), contextProvider.get());
  }

  public static OfflineRepository_Factory create(Provider<CatalogizerDatabase> databaseProvider,
      Provider<SyncManager> syncManagerProvider, Provider<Context> contextProvider) {
    return new OfflineRepository_Factory(databaseProvider, syncManagerProvider, contextProvider);
  }

  public static OfflineRepository newInstance(CatalogizerDatabase database, SyncManager syncManager,
      Context context) {
    return new OfflineRepository(database, syncManager, context);
  }
}
