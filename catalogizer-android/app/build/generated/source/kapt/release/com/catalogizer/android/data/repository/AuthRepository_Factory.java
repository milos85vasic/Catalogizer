// Generated by Dagger (https://dagger.dev).
package com.catalogizer.android.data.repository;

import androidx.datastore.core.DataStore;
import androidx.datastore.preferences.core.Preferences;
import com.catalogizer.android.data.remote.CatalogizerApi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AuthRepository_Factory implements Factory<AuthRepository> {
  private final Provider<CatalogizerApi> apiProvider;

  private final Provider<DataStore<Preferences>> dataStoreProvider;

  public AuthRepository_Factory(Provider<CatalogizerApi> apiProvider,
      Provider<DataStore<Preferences>> dataStoreProvider) {
    this.apiProvider = apiProvider;
    this.dataStoreProvider = dataStoreProvider;
  }

  @Override
  public AuthRepository get() {
    return newInstance(apiProvider.get(), dataStoreProvider.get());
  }

  public static AuthRepository_Factory create(Provider<CatalogizerApi> apiProvider,
      Provider<DataStore<Preferences>> dataStoreProvider) {
    return new AuthRepository_Factory(apiProvider, dataStoreProvider);
  }

  public static AuthRepository newInstance(CatalogizerApi api, DataStore<Preferences> dataStore) {
    return new AuthRepository(api, dataStore);
  }
}
