// Generated by Dagger (https://dagger.dev).
package com.catalogizer.android.data.sync;

import android.content.Context;
import com.catalogizer.android.data.local.CatalogizerDatabase;
import com.catalogizer.android.data.remote.CatalogizerApi;
import com.catalogizer.android.data.repository.AuthRepository;
import com.catalogizer.android.data.repository.MediaRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class SyncManager_Factory implements Factory<SyncManager> {
  private final Provider<CatalogizerDatabase> databaseProvider;

  private final Provider<CatalogizerApi> apiProvider;

  private final Provider<AuthRepository> authRepositoryProvider;

  private final Provider<MediaRepository> mediaRepositoryProvider;

  private final Provider<Context> contextProvider;

  public SyncManager_Factory(Provider<CatalogizerDatabase> databaseProvider,
      Provider<CatalogizerApi> apiProvider, Provider<AuthRepository> authRepositoryProvider,
      Provider<MediaRepository> mediaRepositoryProvider, Provider<Context> contextProvider) {
    this.databaseProvider = databaseProvider;
    this.apiProvider = apiProvider;
    this.authRepositoryProvider = authRepositoryProvider;
    this.mediaRepositoryProvider = mediaRepositoryProvider;
    this.contextProvider = contextProvider;
  }

  @Override
  public SyncManager get() {
    return newInstance(databaseProvider.get(), apiProvider.get(), authRepositoryProvider.get(), mediaRepositoryProvider.get(), contextProvider.get());
  }

  public static SyncManager_Factory create(Provider<CatalogizerDatabase> databaseProvider,
      Provider<CatalogizerApi> apiProvider, Provider<AuthRepository> authRepositoryProvider,
      Provider<MediaRepository> mediaRepositoryProvider, Provider<Context> contextProvider) {
    return new SyncManager_Factory(databaseProvider, apiProvider, authRepositoryProvider, mediaRepositoryProvider, contextProvider);
  }

  public static SyncManager newInstance(CatalogizerDatabase database, CatalogizerApi api,
      AuthRepository authRepository, MediaRepository mediaRepository, Context context) {
    return new SyncManager(database, api, authRepository, mediaRepository, context);
  }
}
