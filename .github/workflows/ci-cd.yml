name: Catalogizer CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      qa_level:
        description: 'QA Testing Level'
        required: false
        default: 'standard'
        type: choice
        options:
          - quick
          - standard
          - complete

env:
  GO_VERSION: "1.21"
  JAVA_VERSION: "17"

jobs:
  # Quick validation for fast feedback
  quick-checks:
    name: "Quick Validation"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run pre-commit validation
        working-directory: ${{ github.workspace }}
        run: |
          chmod +x qa-ai-system/scripts/run-qa-tests.sh
          qa-ai-system/scripts/run-qa-tests.sh quick

  # API Component Testing
  test-api:
    name: "API Testing"
    runs-on: ubuntu-latest
    needs: quick-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run API tests
        working-directory: catalog-api
        run: |
          go mod download
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out

      - name: Build API
        working-directory: catalog-api
        run: go build -v ./...

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: api-coverage
          path: catalog-api/coverage.out

  # Android Component Testing
  test-android:
    name: "Android Testing"
    runs-on: ubuntu-latest
    needs: quick-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        working-directory: catalogizer-android
        run: chmod +x gradlew

      - name: Run Android unit tests
        working-directory: catalogizer-android
        run: ./gradlew testDebugUnitTest --no-daemon

      - name: Build Android APK
        working-directory: catalogizer-android
        run: ./gradlew assembleDebug --no-daemon

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: catalogizer-android/app/build/outputs/apk/debug/*.apk

  # Database Testing
  test-database:
    name: "Database Testing"
    runs-on: ubuntu-latest
    needs: quick-checks
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: catalogizer
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: catalogizer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run database tests
        working-directory: catalog-api
        env:
          DATABASE_URL: "postgres://catalogizer:testpass@localhost:5432/catalogizer_test?sslmode=disable"
          REDIS_URL: "redis://localhost:6379"
        run: |
          go test -v ./database/...
          go test -v ./internal/media/database/...

  # Integration Testing
  test-integration:
    name: "Integration Testing"
    runs-on: ubuntu-latest
    needs: [test-api, test-android, test-database]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run integration tests
        working-directory: catalog-api
        run: |
          go test -v ./internal/tests/...
          go test -v ./tests/automation/...

  # Security Scanning
  security-scan:
    name: "Security Scan"
    runs-on: ubuntu-latest
    needs: quick-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Run gosec security scanner
        working-directory: catalog-api
        run: gosec -fmt=json -out=gosec-report.json ./... || true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            catalog-api/gosec-report.json
            trivy-results.sarif

  # Performance Testing
  performance-test:
    name: "Performance Testing"
    runs-on: ubuntu-latest
    needs: test-api
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run benchmarks
        working-directory: catalog-api
        run: |
          go test -bench=. -benchmem -run=^$ ./... | tee benchmark-results.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: catalog-api/benchmark-results.txt

  # Full QA Test Suite
  full-qa-suite:
    name: "Full QA Suite"
    runs-on: ubuntu-latest
    needs: [test-api, test-android, test-database, test-integration, security-scan]
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Run complete QA test suite
        run: |
          chmod +x qa-ai-system/scripts/run-qa-tests.sh
          qa_level="${{ github.event.inputs.qa_level || 'standard' }}"
          qa-ai-system/scripts/run-qa-tests.sh "$qa_level" all

      - name: Upload QA test logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: qa-test-logs
          path: qa-tests-*.log

  # Final Status Report
  final-report:
    name: "Final Status"
    runs-on: ubuntu-latest
    needs: [quick-checks, test-api, test-android, test-database, test-integration, security-scan, full-qa-suite]
    if: always()
    steps:
      - name: Check build status
        run: |
          echo "üéØ Catalogizer CI/CD Pipeline Results"
          echo "======================================"
          echo "Quick Checks: ${{ needs.quick-checks.result }}"
          echo "API Tests: ${{ needs.test-api.result }}"
          echo "Android Tests: ${{ needs.test-android.result }}"
          echo "Database Tests: ${{ needs.test-database.result }}"
          echo "Integration Tests: ${{ needs.test-integration.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Full QA Suite: ${{ needs.full-qa-suite.result }}"
          echo ""

          if [[ "${{ needs.quick-checks.result }}" == "success" && \
                "${{ needs.test-api.result }}" == "success" && \
                "${{ needs.test-android.result }}" == "success" && \
                "${{ needs.test-database.result }}" == "success" && \
                "${{ needs.test-integration.result }}" == "success" && \
                "${{ needs.security-scan.result }}" == "success" && \
                "${{ needs.full-qa-suite.result }}" == "success" ]]; then
            echo "‚úÖ ALL TESTS PASSED - BUILD SUCCESS"
            exit 0
          else
            echo "‚ùå SOME TESTS FAILED - BUILD FAILED"
            exit 1
          fi
