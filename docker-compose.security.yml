version: '3.8'

# Security Testing Docker Compose Configuration
# This file contains SonarQube and Snyk services for security scanning

services:
  # SonarQube Community Edition
  sonarqube:
    image: sonarqube:community
    container_name: catalogizer-sonarqube
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonarqube-db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar_password
      SONAR_WEB_HOST: 0.0.0.0
      SONAR_WEB_PORT: 9000
      SONAR_WEB_CONTEXT: /
      SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    depends_on:
      - sonarqube-db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - security-testing-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # SonarQube Database
  sonarqube-db:
    image: postgres:15-alpine
    container_name: catalogizer-sonarqube-db
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar_password
      POSTGRES_DB: sonar
    volumes:
      - sonarqube_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonar"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - security-testing-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Snyk CLI Container (for freemium scanning)
  snyk-cli:
    image: node:18-alpine
    container_name: catalogizer-snyk-cli
    environment:
      SNYK_TOKEN: ${SNYK_TOKEN:-dummy-token}
      SNYK_CFG_ORG: ${SNYK_ORG:-catalogizer}
      SNYK_SEVERITY_THRESHOLD: ${SNYK_SEVERITY_THRESHOLD:-medium}
    volumes:
      - ..:/project
      - snyk_cache:/root/.npm
    working_dir: /project
    command: >
      sh -c "
        apk add --no-cache curl &&
        npm install -g snyk &&
        snyk auth $SNYK_TOKEN &&
        echo 'üîç Running Snyk dependency scan...' &&
        snyk test --all-projects --org=$SNYK_ORG --severity-threshold=$SNYK_SEVERITY_THRESHOLD --json --json-file-output=/project/reports/snyk-dependencies-results.json || true &&
        echo 'üîç Running Snyk code analysis...' &&
        snyk code test --all-projects --org=$SNYK_ORG --severity-threshold=$SNYK_SEVERITY_THRESHOLD --json --json-file-output=/project/reports/snyk-code-results.json || true &&
        echo 'üìä Running Snyk container scan...' &&
        snyk container test catalogizer-api:latest --org=$SNYK_ORG --severity-threshold=$SNYK_SEVERITY_THRESHOLD --json --json-file-output=/project/reports/snyk-container-results.json || true &&
        echo '‚úÖ Snyk scanning completed'
      "
    profiles:
      - snyk-scan
    networks:
      - security-testing-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # OWASP Dependency Check
  dependency-check:
    image: owasp/dependency-check:latest
    container_name: catalogizer-dependency-check
    volumes:
      - ..:/project:ro
      - dependency_check_data:/usr/share/dependency-check/data
      - ./reports:/reports
    command: [
      "--project", "Catalogizer",
      "--scan", "/project",
      "--format", "HTML",
      "--format", "XML",
      "--format", "JSON",
      "--out", "/reports/dependency-check"
    ]
    profiles:
      - dependency-check
    networks:
      - security-testing-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 3G
        reservations:
          cpus: '1'
          memory: 1G

  # Trivy Vulnerability Scanner
  trivy-scanner:
    image: aquasec/trivy:latest
    container_name: catalogizer-trivy-scanner
    volumes:
      - ..:/project:ro
      - trivy_cache:/root/.cache/trivy
      - ./reports:/reports
    command: [
      "fs",
      "--scanners", "vuln,secret,config",
      "--format", "json",
      "--output", "/reports/trivy-results.json",
      "/project"
    ]
    profiles:
      - trivy-scan
    networks:
      - security-testing-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

volumes:
  sonarqube_data:
    driver: local
  sonarqube_logs:
    driver: local
  sonarqube_extensions:
    driver: local
  sonarqube_db_data:
    driver: local
  snyk_cache:
    driver: local
  dependency_check_data:
    driver: local
  trivy_cache:
    driver: local

networks:
  security-testing-network:
    driver: bridge