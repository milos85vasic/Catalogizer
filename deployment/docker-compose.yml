version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: catalogizer-database
    restart: ${RESTART_POLICY:-unless-stopped}
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-catalogizer}
      POSTGRES_USER: ${DATABASE_USER:-catalogizer}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-catalogizer_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - database_data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    networks:
      - catalogizer-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-catalogizer}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: catalogizer-redis
    restart: ${RESTART_POLICY:-unless-stopped}
    command: redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - catalogizer-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Catalogizer Server
  catalogizer-server:
    image: catalogizer/server:${CATALOGIZER_VERSION:-latest}
    container_name: catalogizer-server
    restart: ${RESTART_POLICY:-unless-stopped}
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database configuration
      DATABASE_TYPE: ${DATABASE_TYPE:-postgres}
      DATABASE_HOST: database
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      DATABASE_NAME: ${DATABASE_NAME:-catalogizer}
      DATABASE_USER: ${DATABASE_USER:-catalogizer}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-catalogizer_password}

      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}

      # Server configuration
      SERVER_HOST: ${CATALOGIZER_HOST:-0.0.0.0}
      SERVER_PORT: ${CATALOGIZER_PORT:-8080}
      WS_PORT: ${CATALOGIZER_WS_PORT:-8081}
      ADMIN_PORT: ${CATALOGIZER_ADMIN_PORT:-9090}

      # Security
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this}

      # Media configuration
      MEDIA_DIRECTORIES: ${MEDIA_DIRECTORIES:-/media}
      TRANSCODE_ENABLED: ${TRANSCODE_ENABLED:-true}
      TRANSCODE_QUALITY: ${TRANSCODE_QUALITY:-medium}
      THUMBNAIL_GENERATION: ${THUMBNAIL_GENERATION:-true}

      # Environment
      CATALOGIZER_ENV: ${CATALOGIZER_ENV:-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}

      # SSL
      SSL_ENABLED: ${SSL_ENABLED:-false}
      SSL_CERT_PATH: ${SSL_CERT_PATH:-/app/ssl/cert.pem}
      SSL_KEY_PATH: ${SSL_KEY_PATH:-/app/ssl/key.pem}
    ports:
      - "${CATALOGIZER_PORT:-8080}:8080"
      - "${CATALOGIZER_WS_PORT:-8081}:8081"
      - "${CATALOGIZER_ADMIN_PORT:-9090}:9090"
    volumes:
      - server_data:/app/data
      - server_logs:/app/logs
      - server_config:/app/config
      - ${SSL_CERT_PATH:-./ssl}:/app/ssl:ro
      - ${DATA_DIR:-/var/lib/catalogizer}:/app/storage
      # Media directories (customize as needed)
      - ${MEDIA_DIRECTORIES:-/mnt/media}:/media:ro
      # SMB mount points
      - /mnt/smb:/mnt/smb:ro
    networks:
      - catalogizer-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Media Transcoding Service
  transcoder:
    image: catalogizer/transcoder:${CATALOGIZER_VERSION:-latest}
    container_name: catalogizer-transcoder
    restart: ${RESTART_POLICY:-unless-stopped}
    depends_on:
      - redis
    environment:
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      TRANSCODE_QUALITY: ${TRANSCODE_QUALITY:-medium}
      MAX_CONCURRENT_JOBS: ${MAX_TRANSCODE_JOBS:-2}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - transcoder_temp:/tmp/transcoding
      - transcoder_cache:/app/cache
      - ${MEDIA_DIRECTORIES:-/mnt/media}:/media:ro
      - ${DATA_DIR:-/var/lib/catalogizer}/transcoded:/app/output
    networks:
      - catalogizer-network
    deploy:
      resources:
        limits:
          cpus: '${TRANSCODER_CPU_LIMIT:-2.0}'
          memory: ${TRANSCODER_MEMORY_LIMIT:-2G}

  # Web Interface (Nginx)
  web:
    image: catalogizer/web:${CATALOGIZER_VERSION:-latest}
    container_name: catalogizer-web
    restart: ${RESTART_POLICY:-unless-stopped}
    depends_on:
      - catalogizer-server
    environment:
      API_URL: http://catalogizer-server:8080
      WS_URL: ws://catalogizer-server:8081
    ports:
      - "${WEB_PORT:-80}:80"
      - "${WEB_SSL_PORT:-443}:443"
    volumes:
      - web_config:/etc/nginx/conf.d
      - ${SSL_CERT_PATH:-./ssl}:/etc/nginx/ssl:ro
    networks:
      - catalogizer-network

  # Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: catalogizer-prometheus
    restart: ${RESTART_POLICY:-unless-stopped}
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - catalogizer-network

  # Grafana (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: catalogizer-grafana
    restart: ${RESTART_POLICY:-unless-stopped}
    profiles:
      - monitoring
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - catalogizer-network

  # Backup Service (Optional)
  backup:
    image: catalogizer/backup:${CATALOGIZER_VERSION:-latest}
    container_name: catalogizer-backup
    restart: ${RESTART_POLICY:-unless-stopped}
    profiles:
      - backup
    depends_on:
      - database
    environment:
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
      DATABASE_HOST: database
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      DATABASE_NAME: ${DATABASE_NAME:-catalogizer}
      DATABASE_USER: ${DATABASE_USER:-catalogizer}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-catalogizer_password}
      S3_BACKUP_ENABLED: ${S3_BACKUP_ENABLED:-false}
      S3_BUCKET: ${S3_BACKUP_BUCKET:-}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-}
    volumes:
      - backup_data:/backups
      - server_data:/app/data:ro
      - ${DATA_DIR:-/var/lib/catalogizer}:/app/storage:ro
    networks:
      - catalogizer-network

# Networks
networks:
  catalogizer-network:
    driver: bridge
    name: ${DOCKER_NETWORK:-catalogizer-network}

# Volumes
volumes:
  database_data:
    name: ${DOCKER_DATA_VOLUME:-catalogizer-database-data}
  redis_data:
    name: catalogizer-redis-data
  server_data:
    name: catalogizer-server-data
  server_logs:
    name: catalogizer-server-logs
  server_config:
    name: ${DOCKER_CONFIG_VOLUME:-catalogizer-server-config}
  transcoder_temp:
    name: catalogizer-transcoder-temp
  transcoder_cache:
    name: catalogizer-transcoder-cache
  web_config:
    name: catalogizer-web-config
  prometheus_data:
    name: catalogizer-prometheus-data
  grafana_data:
    name: catalogizer-grafana-data
  backup_data:
    name: catalogizer-backup-data