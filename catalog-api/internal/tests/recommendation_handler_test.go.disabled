package tests

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"net/http/httptest"
	"testing"
	"time"

	"github.com/gorilla/mux"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"catalogizer/internal/handlers"
	"catalogizer/internal/models"
	"catalogizer/internal/services"
)

func TestRecommendationHandler_GetSimilarItems(t *testing.T) {
	// Setup services
	mediaRecognitionService := services.NewMediaRecognitionService()
	duplicateDetectionService := services.NewDuplicateDetectionService()
	recommendationService := services.NewRecommendationService(
		mediaRecognitionService,
		duplicateDetectionService,
	)
	deepLinkingService := services.NewDeepLinkingService("https://test.app", "v1")

	handler := handlers.NewRecommendationHandler(recommendationService, deepLinkingService)

	t.Run("GET similar items with default parameters", func(t *testing.T) {
		req, err := http.NewRequest("GET", "/api/v1/media/test123/similar", nil)
		require.NoError(t, err)

		rr := httptest.NewRecorder()
		router := mux.NewRouter()
		router.HandleFunc("/api/v1/media/{id}/similar", handler.GetSimilarItems)
		router.ServeHTTP(rr, req)

		assert.Equal(t, http.StatusOK, rr.Code)

		var response services.SimilarItemsResponse
		err = json.Unmarshal(rr.Body.Bytes(), &response)
		require.NoError(t, err)

		assert.NotNil(t, response.LocalItems)
		assert.NotNil(t, response.ExternalItems)
		assert.True(t, response.TotalFound >= 0)
		assert.NotEmpty(t, response.Algorithms)
	})

	t.Run("GET similar items with query parameters", func(t *testing.T) {
		req, err := http.NewRequest("GET", "/api/v1/media/test123/similar?max_local=5&max_external=3&include_external=true&similarity_threshold=0.7&genre=Action&year_start=2000&year_end=2020&min_rating=7.0&max_rating=9.0&language=en&exclude_watched=true&min_confidence=0.8", nil)
		require.NoError(t, err)

		rr := httptest.NewRecorder()
		router := mux.NewRouter()
		router.HandleFunc("/api/v1/media/{id}/similar", handler.GetSimilarItems)
		router.ServeHTTP(rr, req)

		assert.Equal(t, http.StatusOK, rr.Code)

		var response services.SimilarItemsResponse
		err = json.Unmarshal(rr.Body.Bytes(), &response)
		require.NoError(t, err)

		// Verify limits are respected
		assert.True(t, len(response.LocalItems) <= 5)
		assert.True(t, len(response.ExternalItems) <= 3)
	})

	t.Run("GET similar items with missing media ID", func(t *testing.T) {
		req, err := http.NewRequest("GET", "/api/v1/media//similar", nil)
		require.NoError(t, err)

		rr := httptest.NewRecorder()
		router := mux.NewRouter()
		router.HandleFunc("/api/v1/media/{id}/similar", handler.GetSimilarItems)
		router.ServeHTTP(rr, req)

		assert.Equal(t, http.StatusBadRequest, rr.Code)
	})

	t.Run("GET similar items with invalid parameters", func(t *testing.T) {
		req, err := http.NewRequest("GET", "/api/v1/media/test123/similar?max_local=invalid&similarity_threshold=2.0", nil)
		require.NoError(t, err)

		rr := httptest.NewRecorder()
		router := mux.NewRouter()
		router.HandleFunc("/api/v1/media/{id}/similar", handler.GetSimilarItems)
		router.ServeHTTP(rr, req)

		// Should still work with default values for invalid parameters
		assert.Equal(t, http.StatusOK, rr.Code)
	})
}

func TestRecommendationHandler_PostSimilarItems(t *testing.T) {
	// Setup services
	mediaRecognitionService := services.NewMediaRecognitionService()
	duplicateDetectionService := services.NewDuplicateDetectionService()
	recommendationService := services.NewRecommendationService(
		mediaRecognitionService,
		duplicateDetectionService,
	)
	deepLinkingService := services.NewDeepLinkingService("https://test.app", "v1")

	handler := handlers.NewRecommendationHandler(recommendationService, deepLinkingService)

	t.Run("POST similar items with media metadata", func(t *testing.T) {
		requestBody := services.SimilarItemsRequest{
			MediaID: "post_test_123",
			MediaMetadata: &models.MediaMetadata{
				Title:     "Test Movie",
				Year:      "2023",
				Genre:     "Action",
				MediaType: models.MediaTypeVideo,
			},
			MaxLocalItems:       8,
			MaxExternalItems:    4,
			IncludeExternal:     true,
			SimilarityThreshold: 0.5,
			Filters: &services.RecommendationFilters{
				GenreFilter: []string{"Action", "Adventure"},
				YearRange: &services.YearRange{
					StartYear: 2020,
					EndYear:   2024,
				},
			},
		}

		jsonBody, err := json.Marshal(requestBody)
		require.NoError(t, err)

		req, err := http.NewRequest("POST", "/api/v1/media/similar", bytes.NewBuffer(jsonBody))
		require.NoError(t, err)
		req.Header.Set("Content-Type", "application/json")

		rr := httptest.NewRecorder()
		handler.PostSimilarItems(rr, req)

		assert.Equal(t, http.StatusOK, rr.Code)

		var response services.SimilarItemsResponse
		err = json.Unmarshal(rr.Body.Bytes(), &response)
		require.NoError(t, err)

		assert.NotNil(t, response.LocalItems)
		assert.NotNil(t, response.ExternalItems)
		assert.True(t, len(response.LocalItems) <= 8)
		assert.True(t, len(response.ExternalItems) <= 4)
	})

	t.Run("POST similar items with invalid JSON", func(t *testing.T) {
		req, err := http.NewRequest("POST", "/api/v1/media/similar", bytes.NewBufferString("invalid json"))
		require.NoError(t, err)
		req.Header.Set("Content-Type", "application/json")

		rr := httptest.NewRecorder()
		handler.PostSimilarItems(rr, req)

		assert.Equal(t, http.StatusBadRequest, rr.Code)
	})

	t.Run("POST similar items with missing required fields", func(t *testing.T) {
		requestBody := services.SimilarItemsRequest{
			// Missing MediaID and MediaMetadata
			MaxLocalItems: 5,
		}

		jsonBody, err := json.Marshal(requestBody)
		require.NoError(t, err)

		req, err := http.NewRequest("POST", "/api/v1/media/similar", bytes.NewBuffer(jsonBody))
		require.NoError(t, err)
		req.Header.Set("Content-Type", "application/json")

		rr := httptest.NewRecorder()
		handler.PostSimilarItems(rr, req)

		assert.Equal(t, http.StatusBadRequest, rr.Code)
	})
}

func TestRecommendationHandler_GenerateDeepLinks(t *testing.T) {
	// Setup services
	mediaRecognitionService := services.NewMediaRecognitionService()
	duplicateDetectionService := services.NewDuplicateDetectionService()
	recommendationService := services.NewRecommendationService(
		mediaRecognitionService,
		duplicateDetectionService,
	)
	deepLinkingService := services.NewDeepLinkingService("https://test.app", "v1")

	handler := handlers.NewRecommendationHandler(recommendationService, deepLinkingService)

	t.Run("POST generate deep links", func(t *testing.T) {
		requestBody := services.DeepLinkRequest{
			MediaID: "link_test_123",
			Action:  "detail",
			MediaMetadata: &models.MediaMetadata{
				Title:     "Link Test Movie",
				MediaType: models.MediaTypeVideo,
			},
			Context: &services.LinkContext{
				UserID:   "user123",
				Platform: "android",
				UTMParams: &services.UTMParameters{
					Source:   "recommendation",
					Medium:   "api",
					Campaign: "similar_items",
				},
			},
		}

		jsonBody, err := json.Marshal(requestBody)
		require.NoError(t, err)

		req, err := http.NewRequest("POST", "/api/v1/links/generate", bytes.NewBuffer(jsonBody))
		require.NoError(t, err)
		req.Header.Set("Content-Type", "application/json")

		rr := httptest.NewRecorder()
		handler.GenerateDeepLinks(rr, req)

		assert.Equal(t, http.StatusOK, rr.Code)

		var response services.DeepLinkResponse
		err = json.Unmarshal(rr.Body.Bytes(), &response)
		require.NoError(t, err)

		assert.NotEmpty(t, response.Links)
		assert.NotEmpty(t, response.UniversalLink)
		assert.NotEmpty(t, response.TrackingID)
		assert.NotEmpty(t, response.SupportedApps)

		// Verify platform-specific links
		assert.Contains(t, response.Links, "web")
		assert.Contains(t, response.Links, "android")
		assert.Contains(t, response.Links, "ios")
		assert.Contains(t, response.Links, "desktop")
	})

	t.Run("POST generate deep links with default action", func(t *testing.T) {
		requestBody := services.DeepLinkRequest{
			MediaID: "default_action_test",
			MediaMetadata: &models.MediaMetadata{
				Title:     "Default Action Test",
				MediaType: models.MediaTypeVideo,
			},
			// Action not specified - should default to "detail"
		}

		jsonBody, err := json.Marshal(requestBody)
		require.NoError(t, err)

		req, err := http.NewRequest("POST", "/api/v1/links/generate", bytes.NewBuffer(jsonBody))
		require.NoError(t, err)
		req.Header.Set("Content-Type", "application/json")

		rr := httptest.NewRecorder()
		handler.GenerateDeepLinks(rr, req)

		assert.Equal(t, http.StatusOK, rr.Code)

		var response services.DeepLinkResponse
		err = json.Unmarshal(rr.Body.Bytes(), &response)
		require.NoError(t, err)

		// Verify default action is applied
		for _, link := range response.Links {
			assert.Contains(t, link.URL, "detail")
		}
	})

	t.Run("POST generate deep links with missing required fields", func(t *testing.T) {
		requestBody := services.DeepLinkRequest{
			Action: "detail",
			// Missing MediaID and MediaMetadata
		}

		jsonBody, err := json.Marshal(requestBody)
		require.NoError(t, err)

		req, err := http.NewRequest("POST", "/api/v1/links/generate", bytes.NewBuffer(jsonBody))
		require.NoError(t, err)
		req.Header.Set("Content-Type", "application/json")

		rr := httptest.NewRecorder()
		handler.GenerateDeepLinks(rr, req)

		assert.Equal(t, http.StatusBadRequest, rr.Code)
	})
}

func TestRecommendationHandler_GetMediaWithSimilarItems(t *testing.T) {
	// Setup services
	mediaRecognitionService := services.NewMediaRecognitionService()
	duplicateDetectionService := services.NewDuplicateDetectionService()
	recommendationService := services.NewRecommendationService(
		mediaRecognitionService,
		duplicateDetectionService,
	)
	deepLinkingService := services.NewDeepLinkingService("https://test.app", "v1")

	handler := handlers.NewRecommendationHandler(recommendationService, deepLinkingService)

	t.Run("GET media with similar items", func(t *testing.T) {
		req, err := http.NewRequest("GET", "/api/v1/media/combined_test_123/detail-with-similar?max_similar=5&include_external=true", nil)
		require.NoError(t, err)
		req.Header.Set("User-Agent", "Mozilla/5.0 (Android)")
		req.Header.Set("X-User-ID", "user456")

		rr := httptest.NewRecorder()
		router := mux.NewRouter()
		router.HandleFunc("/api/v1/media/{id}/detail-with-similar", handler.GetMediaWithSimilarItems)
		router.ServeHTTP(rr, req)

		assert.Equal(t, http.StatusOK, rr.Code)

		var response handlers.MediaDetailWithSimilarResponse
		err = json.Unmarshal(rr.Body.Bytes(), &response)
		require.NoError(t, err)

		assert.Equal(t, "combined_test_123", response.MediaID)
		assert.NotNil(t, response.SimilarItems)
		assert.NotNil(t, response.Links)

		// Verify similar items are included
		if response.SimilarItems != nil {
			assert.True(t, len(response.SimilarItems.LocalItems) <= 5)
		}

		// Verify deep links are included
		if response.Links != nil {
			assert.NotEmpty(t, response.Links.Links)
			assert.NotEmpty(t, response.Links.TrackingID)
		}
	})

	t.Run("GET media with similar items - missing media ID", func(t *testing.T) {
		req, err := http.NewRequest("GET", "/api/v1/media//detail-with-similar", nil)
		require.NoError(t, err)

		rr := httptest.NewRecorder()
		router := mux.NewRouter()
		router.HandleFunc("/api/v1/media/{id}/detail-with-similar", handler.GetMediaWithSimilarItems)
		router.ServeHTTP(rr, req)

		assert.Equal(t, http.StatusBadRequest, rr.Code)
	})
}

func TestRecommendationHandler_TrackLinkClick(t *testing.T) {
	// Setup services
	mediaRecognitionService := services.NewMediaRecognitionService()
	duplicateDetectionService := services.NewDuplicateDetectionService()
	recommendationService := services.NewRecommendationService(
		mediaRecognitionService,
		duplicateDetectionService,
	)
	deepLinkingService := services.NewDeepLinkingService("https://test.app", "v1")

	handler := handlers.NewRecommendationHandler(recommendationService, deepLinkingService)

	t.Run("POST track link click", func(t *testing.T) {
		requestBody := services.LinkTrackingEvent{
			TrackingID:   "track_123",
			EventType:    "click",
			Platform:     "android",
			Timestamp:    time.Now(),
			Success:      true,
			AppOpened:    true,
			FallbackUsed: false,
		}

		jsonBody, err := json.Marshal(requestBody)
		require.NoError(t, err)

		req, err := http.NewRequest("POST", "/api/v1/links/track", bytes.NewBuffer(jsonBody))
		require.NoError(t, err)
		req.Header.Set("Content-Type", "application/json")
		req.Header.Set("User-Agent", "TestAgent/1.0")
		req.RemoteAddr = "192.168.1.100:1234"

		rr := httptest.NewRecorder()
		handler.TrackLinkClick(rr, req)

		assert.Equal(t, http.StatusOK, rr.Code)

		var response map[string]string
		err = json.Unmarshal(rr.Body.Bytes(), &response)
		require.NoError(t, err)

		assert.Equal(t, "success", response["status"])
	})

	t.Run("POST track link click with missing tracking ID", func(t *testing.T) {
		requestBody := services.LinkTrackingEvent{
			EventType: "click",
			Platform:  "android",
			// Missing TrackingID
		}

		jsonBody, err := json.Marshal(requestBody)
		require.NoError(t, err)

		req, err := http.NewRequest("POST", "/api/v1/links/track", bytes.NewBuffer(jsonBody))
		require.NoError(t, err)
		req.Header.Set("Content-Type", "application/json")

		rr := httptest.NewRecorder()
		handler.TrackLinkClick(rr, req)

		assert.Equal(t, http.StatusBadRequest, rr.Code)
	})
}

func TestRecommendationHandler_GetLinkAnalytics(t *testing.T) {
	// Setup services
	mediaRecognitionService := services.NewMediaRecognitionService()
	duplicateDetectionService := services.NewDuplicateDetectionService()
	recommendationService := services.NewRecommendationService(
		mediaRecognitionService,
		duplicateDetectionService,
	)
	deepLinkingService := services.NewDeepLinkingService("https://test.app", "v1")

	handler := handlers.NewRecommendationHandler(recommendationService, deepLinkingService)

	t.Run("GET link analytics", func(t *testing.T) {
		req, err := http.NewRequest("GET", "/api/v1/links/track_456/analytics", nil)
		require.NoError(t, err)

		rr := httptest.NewRecorder()
		router := mux.NewRouter()
		router.HandleFunc("/api/v1/links/{tracking_id}/analytics", handler.GetLinkAnalytics)
		router.ServeHTTP(rr, req)

		assert.Equal(t, http.StatusOK, rr.Code)

		var response services.LinkAnalytics
		err = json.Unmarshal(rr.Body.Bytes(), &response)
		require.NoError(t, err)

		assert.Equal(t, "track_456", response.TrackingID)
		assert.True(t, response.TotalClicks >= 0)
		assert.True(t, response.UniqueClicks >= 0)
		assert.NotNil(t, response.PlatformBreakdown)
		assert.True(t, response.ConversionRate >= 0 && response.ConversionRate <= 1)
	})

	t.Run("GET link analytics with missing tracking ID", func(t *testing.T) {
		req, err := http.NewRequest("GET", "/api/v1/links//analytics", nil)
		require.NoError(t, err)

		rr := httptest.NewRecorder()
		router := mux.NewRouter()
		router.HandleFunc("/api/v1/links/{tracking_id}/analytics", handler.GetLinkAnalytics)
		router.ServeHTTP(rr, req)

		assert.Equal(t, http.StatusBadRequest, rr.Code)
	})
}

func TestRecommendationHandler_BatchGenerateLinks(t *testing.T) {
	// Setup services
	mediaRecognitionService := services.NewMediaRecognitionService()
	duplicateDetectionService := services.NewDuplicateDetectionService()
	recommendationService := services.NewRecommendationService(
		mediaRecognitionService,
		duplicateDetectionService,
	)
	deepLinkingService := services.NewDeepLinkingService("https://test.app", "v1")

	handler := handlers.NewRecommendationHandler(recommendationService, deepLinkingService)

	t.Run("POST batch generate links", func(t *testing.T) {
		requestBody := []*services.DeepLinkRequest{
			{
				MediaID: "batch_1",
				Action:  "detail",
				MediaMetadata: &models.MediaMetadata{
					Title:     "Batch Test 1",
					MediaType: models.MediaTypeVideo,
				},
			},
			{
				MediaID: "batch_2",
				Action:  "play",
				MediaMetadata: &models.MediaMetadata{
					Title:     "Batch Test 2",
					MediaType: models.MediaTypeAudio,
				},
			},
		}

		jsonBody, err := json.Marshal(requestBody)
		require.NoError(t, err)

		req, err := http.NewRequest("POST", "/api/v1/links/batch", bytes.NewBuffer(jsonBody))
		require.NoError(t, err)
		req.Header.Set("Content-Type", "application/json")

		rr := httptest.NewRecorder()
		handler.BatchGenerateLinks(rr, req)

		assert.Equal(t, http.StatusOK, rr.Code)

		var response map[string]interface{}
		err = json.Unmarshal(rr.Body.Bytes(), &response)
		require.NoError(t, err)

		assert.Contains(t, response, "links")
		assert.Contains(t, response, "processed")
		assert.Contains(t, response, "requested")
		assert.Equal(t, float64(2), response["requested"])
	})

	t.Run("POST batch generate links - empty request", func(t *testing.T) {
		requestBody := []*services.DeepLinkRequest{}

		jsonBody, err := json.Marshal(requestBody)
		require.NoError(t, err)

		req, err := http.NewRequest("POST", "/api/v1/links/batch", bytes.NewBuffer(jsonBody))
		require.NoError(t, err)
		req.Header.Set("Content-Type", "application/json")

		rr := httptest.NewRecorder()
		handler.BatchGenerateLinks(rr, req)

		assert.Equal(t, http.StatusBadRequest, rr.Code)
	})

	t.Run("POST batch generate links - too many requests", func(t *testing.T) {
		// Create more than 50 requests (the limit)
		requestBody := make([]*services.DeepLinkRequest, 51)
		for i := 0; i < 51; i++ {
			requestBody[i] = &services.DeepLinkRequest{
				MediaID: fmt.Sprintf("batch_%d", i),
				Action:  "detail",
				MediaMetadata: &models.MediaMetadata{
					Title:     fmt.Sprintf("Batch Test %d", i),
					MediaType: models.MediaTypeVideo,
				},
			}
		}

		jsonBody, err := json.Marshal(requestBody)
		require.NoError(t, err)

		req, err := http.NewRequest("POST", "/api/v1/links/batch", bytes.NewBuffer(jsonBody))
		require.NoError(t, err)
		req.Header.Set("Content-Type", "application/json")

		rr := httptest.NewRecorder()
		handler.BatchGenerateLinks(rr, req)

		assert.Equal(t, http.StatusBadRequest, rr.Code)
	})
}

func TestRecommendationHandler_GenerateSmartLink(t *testing.T) {
	// Setup services
	mediaRecognitionService := services.NewMediaRecognitionService()
	duplicateDetectionService := services.NewDuplicateDetectionService()
	recommendationService := services.NewRecommendationService(
		mediaRecognitionService,
		duplicateDetectionService,
	)
	deepLinkingService := services.NewDeepLinkingService("https://test.app", "v1")

	handler := handlers.NewRecommendationHandler(recommendationService, deepLinkingService)

	t.Run("POST generate smart link", func(t *testing.T) {
		requestBody := services.DeepLinkRequest{
			MediaID: "smart_test_123",
			Action:  "detail",
			MediaMetadata: &models.MediaMetadata{
				Title:     "Smart Link Test",
				MediaType: models.MediaTypeVideo,
			},
		}

		jsonBody, err := json.Marshal(requestBody)
		require.NoError(t, err)

		req, err := http.NewRequest("POST", "/api/v1/links/smart", bytes.NewBuffer(jsonBody))
		require.NoError(t, err)
		req.Header.Set("Content-Type", "application/json")
		req.Header.Set("User-Agent", "Mozilla/5.0 (Android)")

		rr := httptest.NewRecorder()
		handler.GenerateSmartLink(rr, req)

		assert.Equal(t, http.StatusOK, rr.Code)

		var response services.SmartLinkResponse
		err = json.Unmarshal(rr.Body.Bytes(), &response)
		require.NoError(t, err)

		assert.NotEmpty(t, response.Strategy)
		assert.NotEmpty(t, response.PrimaryLink)
		assert.NotNil(t, response.Instructions)
	})
}

func TestRecommendationHandler_GetRecommendationTrends(t *testing.T) {
	// Setup services
	mediaRecognitionService := services.NewMediaRecognitionService()
	duplicateDetectionService := services.NewDuplicateDetectionService()
	recommendationService := services.NewRecommendationService(
		mediaRecognitionService,
		duplicateDetectionService,
	)
	deepLinkingService := services.NewDeepLinkingService("https://test.app", "v1")

	handler := handlers.NewRecommendationHandler(recommendationService, deepLinkingService)

	t.Run("GET recommendation trends", func(t *testing.T) {
		req, err := http.NewRequest("GET", "/api/v1/recommendations/trends?media_type=video&period=week&limit=15", nil)
		require.NoError(t, err)

		rr := httptest.NewRecorder()
		handler.GetRecommendationTrends(rr, req)

		assert.Equal(t, http.StatusOK, rr.Code)

		var response handlers.RecommendationTrends
		err = json.Unmarshal(rr.Body.Bytes(), &response)
		require.NoError(t, err)

		assert.Equal(t, "week", response.Period)
		assert.Equal(t, "video", response.MediaType)
		assert.True(t, len(response.Items) <= 15)
		assert.False(t, response.UpdatedAt.IsZero())

		// Verify trend items structure
		for _, item := range response.Items {
			assert.NotEmpty(t, item.MediaID)
			assert.NotEmpty(t, item.Title)
			assert.True(t, item.TrendScore >= 0 && item.TrendScore <= 1)
			assert.True(t, item.RecommendationCount >= 0)
			assert.True(t, item.ViewCount >= 0)
		}
	})

	t.Run("GET recommendation trends with defaults", func(t *testing.T) {
		req, err := http.NewRequest("GET", "/api/v1/recommendations/trends", nil)
		require.NoError(t, err)

		rr := httptest.NewRecorder()
		handler.GetRecommendationTrends(rr, req)

		assert.Equal(t, http.StatusOK, rr.Code)

		var response handlers.RecommendationTrends
		err = json.Unmarshal(rr.Body.Bytes(), &response)
		require.NoError(t, err)

		assert.Equal(t, "week", response.Period) // Default period
		assert.True(t, len(response.Items) <= 20) // Default limit
	})
}

// Test helper functions for context extraction
func TestRecommendationHandler_ContextExtraction(t *testing.T) {
	// Setup services
	mediaRecognitionService := services.NewMediaRecognitionService()
	duplicateDetectionService := services.NewDuplicateDetectionService()
	recommendationService := services.NewRecommendationService(
		mediaRecognitionService,
		duplicateDetectionService,
	)
	deepLinkingService := services.NewDeepLinkingService("https://test.app", "v1")

	handler := handlers.NewRecommendationHandler(recommendationService, deepLinkingService)

	t.Run("context extraction from headers", func(t *testing.T) {
		requestBody := services.DeepLinkRequest{
			MediaID: "context_test_123",
			Action:  "detail",
			MediaMetadata: &models.MediaMetadata{
				Title:     "Context Test",
				MediaType: models.MediaTypeVideo,
			},
		}

		jsonBody, err := json.Marshal(requestBody)
		require.NoError(t, err)

		req, err := http.NewRequest("POST", "/api/v1/links/generate", bytes.NewBuffer(jsonBody))
		require.NoError(t, err)
		req.Header.Set("Content-Type", "application/json")
		req.Header.Set("User-Agent", "Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)")
		req.Header.Set("X-User-ID", "user789")
		req.Header.Set("X-Device-ID", "device123")
		req.Header.Set("X-Session-ID", "session456")
		req.Header.Set("Referer", "https://catalogizer.app/search")

		rr := httptest.NewRecorder()
		handler.GenerateDeepLinks(rr, req)

		assert.Equal(t, http.StatusOK, rr.Code)

		var response services.DeepLinkResponse
		err = json.Unmarshal(rr.Body.Bytes(), &response)
		require.NoError(t, err)

		// Verify that context was extracted and used in links
		webLink := response.Links["web"]
		assert.Contains(t, webLink.Parameters, "user_id")
		assert.Equal(t, "user789", webLink.Parameters["user_id"])
	})

	t.Run("UTM parameter extraction", func(t *testing.T) {
		requestBody := services.DeepLinkRequest{
			MediaID: "utm_test_123",
			Action:  "detail",
			MediaMetadata: &models.MediaMetadata{
				Title:     "UTM Test",
				MediaType: models.MediaTypeVideo,
			},
		}

		jsonBody, err := json.Marshal(requestBody)
		require.NoError(t, err)

		req, err := http.NewRequest("POST", "/api/v1/links/generate?utm_source=email&utm_medium=newsletter&utm_campaign=recommendations", bytes.NewBuffer(jsonBody))
		require.NoError(t, err)
		req.Header.Set("Content-Type", "application/json")

		rr := httptest.NewRecorder()
		handler.GenerateDeepLinks(rr, req)

		assert.Equal(t, http.StatusOK, rr.Code)

		var response services.DeepLinkResponse
		err = json.Unmarshal(rr.Body.Bytes(), &response)
		require.NoError(t, err)

		// Verify UTM parameters are included
		webLink := response.Links["web"]
		assert.Contains(t, webLink.Parameters, "utm_source")
		assert.Equal(t, "email", webLink.Parameters["utm_source"])
	})
}

func BenchmarkRecommendationHandler(b *testing.B) {
	// Setup services
	mediaRecognitionService := services.NewMediaRecognitionService()
	duplicateDetectionService := services.NewDuplicateDetectionService()
	recommendationService := services.NewRecommendationService(
		mediaRecognitionService,
		duplicateDetectionService,
	)
	deepLinkingService := services.NewDeepLinkingService("https://test.app", "v1")

	handler := handlers.NewRecommendationHandler(recommendationService, deepLinkingService)

	b.Run("GetSimilarItems", func(b *testing.B) {
		req, _ := http.NewRequest("GET", "/api/v1/media/benchmark_test/similar", nil)
		router := mux.NewRouter()
		router.HandleFunc("/api/v1/media/{id}/similar", handler.GetSimilarItems)

		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			rr := httptest.NewRecorder()
			router.ServeHTTP(rr, req)
		}
	})

	b.Run("GenerateDeepLinks", func(b *testing.B) {
		requestBody := services.DeepLinkRequest{
			MediaID: "benchmark_test",
			Action:  "detail",
			MediaMetadata: &models.MediaMetadata{
				Title:     "Benchmark Test",
				MediaType: models.MediaTypeVideo,
			},
		}

		jsonBody, _ := json.Marshal(requestBody)

		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			req, _ := http.NewRequest("POST", "/api/v1/links/generate", bytes.NewBuffer(jsonBody))
			req.Header.Set("Content-Type", "application/json")
			rr := httptest.NewRecorder()
			handler.GenerateDeepLinks(rr, req)
		}
	})
}